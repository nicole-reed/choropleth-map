{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","a","axios","get","countiesResponse","educationResponse","console","log","drawMap","data","countiesData","educationData","percentages","map","county","bachelorsOrHigher","percentageDifs","d3","getEducationCountyById","id","find","fips","colorScale","domain","d","range","svg","append","attr","text","legend","legendColors","i","push","selectAll","enter","style","legendTicks","legendScale","length","legendAxis","tickValues","tickFormat","call","topojson","objects","counties","features","area_name","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.582461dd.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport * as topojson from 'topojson';\nimport * as d3 from 'd3';\n\n\nfunction App() {\n\n  // const [counties, setCounties] = useState({})\n  // const [education, setEducation] = useState([])\n\n  useEffect(async () => {\n    try {\n      const countiesResponse = await axios.get('https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/counties.json')\n      const educationResponse = await axios.get('https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/for_user_education.json')\n      console.log(educationResponse)\n      drawMap(countiesResponse.data, educationResponse.data)\n    } catch (error) {\n      console.log('error fetching data:\\n', error)\n    }\n  }, [])\n\n  const drawMap = (countiesData, educationData) => {\n    console.log('education data', educationData)\n\n    const percentages = educationData.map(county => county.bachelorsOrHigher)\n    console.log('percentages', percentages)\n    const percentageDifs = (d3.max(percentages) - d3.min(percentages)) / 6;\n    console.log(percentageDifs)\n\n    const getEducationCountyById = (id) => educationData.find(county => county.fips === id)\n\n    // const minPercentage = d3.min(percentages)\n    // const maxPercentage = d3.max(percentages)\n\n\n    const colors = ['#00008b', '#58ccf3', '#94f3b8ee', '#f8cf60', '#ffa500', '#f33d3dc5'];\n    const colorScale = d3.scaleQuantize()\n      .domain([d3.min(educationData, (d) => d.bachelorsOrHigher), d3.max(educationData, (d) => d.bachelorsOrHigher)])\n      .range(colors);\n\n\n    const svg = d3.select('#chart')\n      .append('svg')\n      .attr('width', 1000)\n      .attr('height', 1000)\n\n    svg.append('text')\n      .attr('id', 'description')\n      .attr('x', 250)\n      .attr('y', 15)\n      .text('Adults 25 And Older With a Bachelor\\'s Degree Or Higher (2010-2014)')\n\n    const legend = svg.append('g')\n      .attr('id', 'legend')\n\n    const legendColors = [];\n    for (let i = 0; i < 6; i++) {\n      legendColors.push(d3.min(percentages) + ((percentageDifs * i) + (percentageDifs / 2)));\n    };\n    console.log('legend colors', legendColors)\n\n    legend.selectAll('rect')\n      .data(legendColors)\n      .enter()\n      .append('rect')\n      .attr('x', (d, i) => (30 * i) + 815)\n      .attr('y', 400)\n      .attr('val', d => d)\n      .attr('class', 'legend-cell')\n      .attr('width', 30)\n      .attr('height', 20)\n      .style('fill', d => colorScale(d));\n\n\n    const legendTicks = [];\n    for (let i = 0; i < 7; i++) {\n      legendTicks.push(d3.min(percentages) + (percentageDifs * i))\n    };\n    console.log(legendTicks)\n\n    const legendScale = d3.scaleLinear()\n      .domain([legendTicks[0], legendTicks[legendTicks.length - 1]])\n      .range([815, 814 + (30 * 6)])\n\n    const legendAxis = d3.axisBottom(legendScale)\n      .tickValues(legendTicks)\n      .tickFormat(d3.format('.1f'))\n\n\n    legend.append('g')\n      .attr('id', 'legend-axis')\n      .attr(\"transform\", `translate(0, ${420})`)\n      .call(legendAxis);\n\n    legend.append('text')\n      .attr('id', 'legend')\n      .attr('x', 845)\n      .attr('y', 395)\n      .text('% By County')\n\n    const map = svg.append('g')\n\n    map.append('g')\n      .attr('class', 'county')\n      .selectAll('path')\n      .data(topojson.feature(countiesData, countiesData.objects.counties).features)\n      .enter().append(\"path\")\n      .attr('data-fips', (d) => d.id)\n      .attr('data-education', (d) => getEducationCountyById(d.id).bachelorsOrHigher)\n      .attr('d', d3.geoPath())\n      .style('fill', (d) => colorScale(getEducationCountyById(d.id).bachelorsOrHigher))\n      .append(\"title\")\n      .attr('id', 'tooltip')\n      .attr('data-education', (d) => getEducationCountyById(d.id).bachelorsOrHigher)\n      .text((d) => `${getEducationCountyById(d.id).area_name}\\n${getEducationCountyById(d.id).bachelorsOrHigher}%`)\n\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 id='title'>United States Educational Attainment</h1>\n      <div id='chart'></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}